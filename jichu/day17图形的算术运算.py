import cv2
import numpy as np
"""
图像的加减乘除
"""
# 读取图片
img1=cv2.imread('../face_database/boss.jpg')
img2=cv2.imread('../image/ali.jpg')

print(img1.shape)

"""
图像运算是在像素级别进行的,通过对图像中的每个像素进行算术运算,如加法、减法、乘法等。
主要用于调整图像的对比度、亮度,或者对图像进行简单的逻辑操作。

# 加法运算（增加亮度）： 将每个像素的值都加上一个常数,比如100。这样会使图像整体变亮。

# 减法运算： 减法运算可以用来增强图像的细节。通过减去一个常数,你可以减少图像的整体亮度。
减法运算也可以用于图像增强、边缘检测等应用。需要注意的是,负值被截断为0,因此减法运算可能降低图像的整体亮度。

# 乘法运算（调整对比度）： 将每个像素的值都乘以一个常数,比如2。这样可以增加像素值的动态范围,提高图像的对比度。

# 除法运算： 除法运算可以用来调整图像的对比度。通过将每个像素的值除以一个常数,可以缩小像素值的范围,从而提高图像的对比度。
除法运算也可以用于图像增强、灰度拉伸等应用。需要注意的是,除法运算可能导致图像整体变暗,因此在实际应用中需要谨慎选择调整参数。

算术运算需要相同的长宽通道,否则会报错
当像素相加或相乘后,像素点超出255的数字,会被截断。相当于[a+b]%256
%取余
当像素相减或相除后,减完如果小于0,统一变成0
图片中的像素值还可以分别和单个数字进行运算
"""
# 需要将两个图片的形状,维度保持一致
# 这里使用ndarray将两个图片切割成一样的（相当于图像剪裁）
new1= img1[0:1440,0:1280]
new2= img2[0:1440,1280:2560]

# 1-加法
# 加法要求两个图形大小一致
# 加法的效果是加起来如果超过255,则统一变成255
cv_add= cv2.add(new2,new1)

# 2-减法
cv_subtract=cv2.subtract(new2,new1)

# 3-乘法
cv_multiply=cv2.multiply(new1,new2)

# 4-除法
cv_divide=cv2.divide(new1,new2)

cv2.namedWindow('mao',cv2.WINDOW_NORMAL)
cv2.resizeWindow('mao',500,500)

cv2.imshow('mao',cv_subtract)

cv2.waitKey(0)