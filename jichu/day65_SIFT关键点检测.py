import cv2
import numpy as np

"""
SIFT: 即尺度不变特征变换(Scale-invariant feature transform,SIFT)
是一种用于在图像中检测关键点并提取特征的算法。它具有对图像尺度和旋转变化的不变性,使得它在处理不同角度和大小的图像时非常强大
(Harris角点具有旋转不变的特性,但是缩放(大/小)后,原来的角点有可能就不是角点了)

原理: 
尺度空间极值检测: SIFT使用高斯函数来构建尺度空间金字塔,通过对图像进行多次模糊处理,生成一系列不同尺度的图像。这样做的目的是使算法对图像的尺度变化具有不变性。
在尺度空间中,SIFT检测局部极值点,这些点对应于图像的特征。这一步是通过比较一个像素点及其周围像素的灰度值来完成的。
关键点精确定位: 对于检测到的关键点,SIFT进行精确定位,以找到关键点的准确位置。这里使用了高斯差分金字塔,通过检测尺度空间中的极值来定位关键点。
方向分配: 为了增强算法对图像旋转的不变性,SIFT为每个关键点分配一个主方向。这是通过计算关键点周围像素的梯度和方向直方图来实现的。主方向通常是梯度直方图的峰值。
特征描述: 在关键点的周围区域内,SIFT构建描述子。这个描述子是一个向量,包含关键点周围区域的梯度信息。描述子的构建考虑了图像的尺度变化和旋转。

工作步骤: 
高斯模糊和尺度空间建立: 对输入图像进行多次高斯模糊,构建尺度空间金字塔。
极值点检测: 在尺度空间金字塔中寻找局部极值点,这些点被认为是关键点的候选。
关键点定位: 对候选关键点进行精确定位,使用高斯差分金字塔定位关键点的准确位置。
方向分配: 为每个关键点分配主方向,通常选择梯度直方图的最大峰值。
特征描述: 构建关键点的描述子,包含关键点周围区域的梯度信息。描述子的生成是基于关键点的尺度和方向的。

使用SIFT的步骤
创建SIFT对象 sift=cv2.SIFT.create()
进行检测 kp=sift.detect(img,...)
绘制关键点 cv2.drawKeypoints(gray,kp,img)

关键点和描述子:
关键点: 位置,大小和方向
关键点描述子(描述符): 记录了关键点周围对其有共享的像素点的一组向量值,其不受仿射变换,光照变换等影响.
描述子的作用就是进行特征匹配(后面的课程会用)
"""
# 旧版本创建SIFT对象创建(需要额外下载扩展包) cv2.xfeatures2d.SIFT_create()

img=cv2.imread('../image/chess.png')

gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)

# 创建SIFT对象
sift=cv2.SIFT.create()

"""
方法1
"""
# SIFT算法的描述子只有128个

# # 进行检测,kp是一个列表,里面存放的是封装的KeyPoint对象(关键点)
# kp=sift.detect(gray)

# # 计算描述子
# kp,des= sift.compute(gray,kp)
"""
方法2
sift: 是一个 SIFT 对象，通过 cv2.SIFT.create() 创建。
detectAndCompute: 是 SIFT 类的一个函数，用于在图像中检测关键点并计算描述子。
img1: 是输入的图像，也就是要进行特征检测和描述的图像。
None: 是一个可选的掩码参数，可以指定一个图像掩码，在掩码范围内进行特征检测，而在掩码范围外不进行。在这里没有使用掩码，所以设为 None。
"""
kp,des= sift.detectAndCompute(gray,mask=None)
print(des.shape)
# (在原图上)绘制找到的关键点
cv2.drawKeypoints(gray,kp,img)

cv2.imshow('img', img)
cv2.waitKey(0)
cv2.destroyAllWindows()